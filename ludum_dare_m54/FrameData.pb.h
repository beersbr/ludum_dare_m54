// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameData.proto

#ifndef PROTOBUF_FrameData_2eproto__INCLUDED
#define PROTOBUF_FrameData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace DasSpace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FrameData_2eproto();
void protobuf_AssignDesc_FrameData_2eproto();
void protobuf_ShutdownFile_FrameData_2eproto();

class FrameData;
class SpriteSheet;

// ===================================================================

class FrameData : public ::google::protobuf::Message {
 public:
  FrameData();
  virtual ~FrameData();

  FrameData(const FrameData& from);

  inline FrameData& operator=(const FrameData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameData& default_instance();

  void Swap(FrameData* other);

  // implements Message ----------------------------------------------

  FrameData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameData& from);
  void MergeFrom(const FrameData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string animTag = 1;
  inline bool has_animtag() const;
  inline void clear_animtag();
  static const int kAnimTagFieldNumber = 1;
  inline const ::std::string& animtag() const;
  inline void set_animtag(const ::std::string& value);
  inline void set_animtag(const char* value);
  inline void set_animtag(const char* value, size_t size);
  inline ::std::string* mutable_animtag();
  inline ::std::string* release_animtag();
  inline void set_allocated_animtag(::std::string* animtag);

  // required int32 seqence = 2;
  inline bool has_seqence() const;
  inline void clear_seqence();
  static const int kSeqenceFieldNumber = 2;
  inline ::google::protobuf::int32 seqence() const;
  inline void set_seqence(::google::protobuf::int32 value);

  // required int32 posX = 3;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 3;
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // required int32 posY = 4;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 4;
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // required int32 sizeX = 5;
  inline bool has_sizex() const;
  inline void clear_sizex();
  static const int kSizeXFieldNumber = 5;
  inline ::google::protobuf::int32 sizex() const;
  inline void set_sizex(::google::protobuf::int32 value);

  // required int32 sizeY = 6;
  inline bool has_sizey() const;
  inline void clear_sizey();
  static const int kSizeYFieldNumber = 6;
  inline ::google::protobuf::int32 sizey() const;
  inline void set_sizey(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DasSpace.FrameData)
 private:
  inline void set_has_animtag();
  inline void clear_has_animtag();
  inline void set_has_seqence();
  inline void clear_has_seqence();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_sizex();
  inline void clear_has_sizex();
  inline void set_has_sizey();
  inline void clear_has_sizey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* animtag_;
  ::google::protobuf::int32 seqence_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::int32 sizex_;
  ::google::protobuf::int32 sizey_;
  friend void  protobuf_AddDesc_FrameData_2eproto();
  friend void protobuf_AssignDesc_FrameData_2eproto();
  friend void protobuf_ShutdownFile_FrameData_2eproto();

  void InitAsDefaultInstance();
  static FrameData* default_instance_;
};
// -------------------------------------------------------------------

class SpriteSheet : public ::google::protobuf::Message {
 public:
  SpriteSheet();
  virtual ~SpriteSheet();

  SpriteSheet(const SpriteSheet& from);

  inline SpriteSheet& operator=(const SpriteSheet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpriteSheet& default_instance();

  void Swap(SpriteSheet* other);

  // implements Message ----------------------------------------------

  SpriteSheet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpriteSheet& from);
  void MergeFrom(const SpriteSheet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 entityID = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 1;
  inline ::google::protobuf::int32 entityid() const;
  inline void set_entityid(::google::protobuf::int32 value);

  // required string animTag = 2;
  inline bool has_animtag() const;
  inline void clear_animtag();
  static const int kAnimTagFieldNumber = 2;
  inline const ::std::string& animtag() const;
  inline void set_animtag(const ::std::string& value);
  inline void set_animtag(const char* value);
  inline void set_animtag(const char* value, size_t size);
  inline ::std::string* mutable_animtag();
  inline ::std::string* release_animtag();
  inline void set_allocated_animtag(::std::string* animtag);

  // repeated .DasSpace.FrameData frames = 3;
  inline int frames_size() const;
  inline void clear_frames();
  static const int kFramesFieldNumber = 3;
  inline const ::DasSpace::FrameData& frames(int index) const;
  inline ::DasSpace::FrameData* mutable_frames(int index);
  inline ::DasSpace::FrameData* add_frames();
  inline const ::google::protobuf::RepeatedPtrField< ::DasSpace::FrameData >&
      frames() const;
  inline ::google::protobuf::RepeatedPtrField< ::DasSpace::FrameData >*
      mutable_frames();

  // @@protoc_insertion_point(class_scope:DasSpace.SpriteSheet)
 private:
  inline void set_has_entityid();
  inline void clear_has_entityid();
  inline void set_has_animtag();
  inline void clear_has_animtag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* animtag_;
  ::google::protobuf::RepeatedPtrField< ::DasSpace::FrameData > frames_;
  ::google::protobuf::int32 entityid_;
  friend void  protobuf_AddDesc_FrameData_2eproto();
  friend void protobuf_AssignDesc_FrameData_2eproto();
  friend void protobuf_ShutdownFile_FrameData_2eproto();

  void InitAsDefaultInstance();
  static SpriteSheet* default_instance_;
};
// ===================================================================


// ===================================================================

// FrameData

// required string animTag = 1;
inline bool FrameData::has_animtag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameData::set_has_animtag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameData::clear_has_animtag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameData::clear_animtag() {
  if (animtag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animtag_->clear();
  }
  clear_has_animtag();
}
inline const ::std::string& FrameData::animtag() const {
  // @@protoc_insertion_point(field_get:DasSpace.FrameData.animTag)
  return *animtag_;
}
inline void FrameData::set_animtag(const ::std::string& value) {
  set_has_animtag();
  if (animtag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animtag_ = new ::std::string;
  }
  animtag_->assign(value);
  // @@protoc_insertion_point(field_set:DasSpace.FrameData.animTag)
}
inline void FrameData::set_animtag(const char* value) {
  set_has_animtag();
  if (animtag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animtag_ = new ::std::string;
  }
  animtag_->assign(value);
  // @@protoc_insertion_point(field_set_char:DasSpace.FrameData.animTag)
}
inline void FrameData::set_animtag(const char* value, size_t size) {
  set_has_animtag();
  if (animtag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animtag_ = new ::std::string;
  }
  animtag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DasSpace.FrameData.animTag)
}
inline ::std::string* FrameData::mutable_animtag() {
  set_has_animtag();
  if (animtag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animtag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DasSpace.FrameData.animTag)
  return animtag_;
}
inline ::std::string* FrameData::release_animtag() {
  clear_has_animtag();
  if (animtag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = animtag_;
    animtag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FrameData::set_allocated_animtag(::std::string* animtag) {
  if (animtag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete animtag_;
  }
  if (animtag) {
    set_has_animtag();
    animtag_ = animtag;
  } else {
    clear_has_animtag();
    animtag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DasSpace.FrameData.animTag)
}

// required int32 seqence = 2;
inline bool FrameData::has_seqence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameData::set_has_seqence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameData::clear_has_seqence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameData::clear_seqence() {
  seqence_ = 0;
  clear_has_seqence();
}
inline ::google::protobuf::int32 FrameData::seqence() const {
  // @@protoc_insertion_point(field_get:DasSpace.FrameData.seqence)
  return seqence_;
}
inline void FrameData::set_seqence(::google::protobuf::int32 value) {
  set_has_seqence();
  seqence_ = value;
  // @@protoc_insertion_point(field_set:DasSpace.FrameData.seqence)
}

// required int32 posX = 3;
inline bool FrameData::has_posx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FrameData::set_has_posx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FrameData::clear_has_posx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FrameData::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 FrameData::posx() const {
  // @@protoc_insertion_point(field_get:DasSpace.FrameData.posX)
  return posx_;
}
inline void FrameData::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:DasSpace.FrameData.posX)
}

// required int32 posY = 4;
inline bool FrameData::has_posy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FrameData::set_has_posy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FrameData::clear_has_posy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FrameData::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 FrameData::posy() const {
  // @@protoc_insertion_point(field_get:DasSpace.FrameData.posY)
  return posy_;
}
inline void FrameData::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:DasSpace.FrameData.posY)
}

// required int32 sizeX = 5;
inline bool FrameData::has_sizex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FrameData::set_has_sizex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FrameData::clear_has_sizex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FrameData::clear_sizex() {
  sizex_ = 0;
  clear_has_sizex();
}
inline ::google::protobuf::int32 FrameData::sizex() const {
  // @@protoc_insertion_point(field_get:DasSpace.FrameData.sizeX)
  return sizex_;
}
inline void FrameData::set_sizex(::google::protobuf::int32 value) {
  set_has_sizex();
  sizex_ = value;
  // @@protoc_insertion_point(field_set:DasSpace.FrameData.sizeX)
}

// required int32 sizeY = 6;
inline bool FrameData::has_sizey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FrameData::set_has_sizey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FrameData::clear_has_sizey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FrameData::clear_sizey() {
  sizey_ = 0;
  clear_has_sizey();
}
inline ::google::protobuf::int32 FrameData::sizey() const {
  // @@protoc_insertion_point(field_get:DasSpace.FrameData.sizeY)
  return sizey_;
}
inline void FrameData::set_sizey(::google::protobuf::int32 value) {
  set_has_sizey();
  sizey_ = value;
  // @@protoc_insertion_point(field_set:DasSpace.FrameData.sizeY)
}

// -------------------------------------------------------------------

// SpriteSheet

// required int32 entityID = 1;
inline bool SpriteSheet::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpriteSheet::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpriteSheet::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpriteSheet::clear_entityid() {
  entityid_ = 0;
  clear_has_entityid();
}
inline ::google::protobuf::int32 SpriteSheet::entityid() const {
  // @@protoc_insertion_point(field_get:DasSpace.SpriteSheet.entityID)
  return entityid_;
}
inline void SpriteSheet::set_entityid(::google::protobuf::int32 value) {
  set_has_entityid();
  entityid_ = value;
  // @@protoc_insertion_point(field_set:DasSpace.SpriteSheet.entityID)
}

// required string animTag = 2;
inline bool SpriteSheet::has_animtag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpriteSheet::set_has_animtag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpriteSheet::clear_has_animtag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpriteSheet::clear_animtag() {
  if (animtag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animtag_->clear();
  }
  clear_has_animtag();
}
inline const ::std::string& SpriteSheet::animtag() const {
  // @@protoc_insertion_point(field_get:DasSpace.SpriteSheet.animTag)
  return *animtag_;
}
inline void SpriteSheet::set_animtag(const ::std::string& value) {
  set_has_animtag();
  if (animtag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animtag_ = new ::std::string;
  }
  animtag_->assign(value);
  // @@protoc_insertion_point(field_set:DasSpace.SpriteSheet.animTag)
}
inline void SpriteSheet::set_animtag(const char* value) {
  set_has_animtag();
  if (animtag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animtag_ = new ::std::string;
  }
  animtag_->assign(value);
  // @@protoc_insertion_point(field_set_char:DasSpace.SpriteSheet.animTag)
}
inline void SpriteSheet::set_animtag(const char* value, size_t size) {
  set_has_animtag();
  if (animtag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animtag_ = new ::std::string;
  }
  animtag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DasSpace.SpriteSheet.animTag)
}
inline ::std::string* SpriteSheet::mutable_animtag() {
  set_has_animtag();
  if (animtag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animtag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DasSpace.SpriteSheet.animTag)
  return animtag_;
}
inline ::std::string* SpriteSheet::release_animtag() {
  clear_has_animtag();
  if (animtag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = animtag_;
    animtag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpriteSheet::set_allocated_animtag(::std::string* animtag) {
  if (animtag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete animtag_;
  }
  if (animtag) {
    set_has_animtag();
    animtag_ = animtag;
  } else {
    clear_has_animtag();
    animtag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DasSpace.SpriteSheet.animTag)
}

// repeated .DasSpace.FrameData frames = 3;
inline int SpriteSheet::frames_size() const {
  return frames_.size();
}
inline void SpriteSheet::clear_frames() {
  frames_.Clear();
}
inline const ::DasSpace::FrameData& SpriteSheet::frames(int index) const {
  // @@protoc_insertion_point(field_get:DasSpace.SpriteSheet.frames)
  return frames_.Get(index);
}
inline ::DasSpace::FrameData* SpriteSheet::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:DasSpace.SpriteSheet.frames)
  return frames_.Mutable(index);
}
inline ::DasSpace::FrameData* SpriteSheet::add_frames() {
  // @@protoc_insertion_point(field_add:DasSpace.SpriteSheet.frames)
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DasSpace::FrameData >&
SpriteSheet::frames() const {
  // @@protoc_insertion_point(field_list:DasSpace.SpriteSheet.frames)
  return frames_;
}
inline ::google::protobuf::RepeatedPtrField< ::DasSpace::FrameData >*
SpriteSheet::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:DasSpace.SpriteSheet.frames)
  return &frames_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DasSpace

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FrameData_2eproto__INCLUDED
