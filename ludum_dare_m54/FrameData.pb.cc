// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FrameData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DasSpace {

namespace {

const ::google::protobuf::Descriptor* FrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpriteSheet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpriteSheet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FrameData_2eproto() {
  protobuf_AddDesc_FrameData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FrameData.proto");
  GOOGLE_CHECK(file != NULL);
  FrameData_descriptor_ = file->message_type(0);
  static const int FrameData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameData, animtag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameData, seqence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameData, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameData, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameData, sizex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameData, sizey_),
  };
  FrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameData_descriptor_,
      FrameData::default_instance_,
      FrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameData));
  SpriteSheet_descriptor_ = file->message_type(1);
  static const int SpriteSheet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteSheet, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteSheet, animtag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteSheet, frames_),
  };
  SpriteSheet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpriteSheet_descriptor_,
      SpriteSheet::default_instance_,
      SpriteSheet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteSheet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteSheet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpriteSheet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FrameData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameData_descriptor_, &FrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpriteSheet_descriptor_, &SpriteSheet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FrameData_2eproto() {
  delete FrameData::default_instance_;
  delete FrameData_reflection_;
  delete SpriteSheet::default_instance_;
  delete SpriteSheet_reflection_;
}

void protobuf_AddDesc_FrameData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017FrameData.proto\022\010DasSpace\"g\n\tFrameData"
    "\022\017\n\007animTag\030\001 \002(\t\022\017\n\007seqence\030\002 \002(\005\022\014\n\004po"
    "sX\030\003 \002(\005\022\014\n\004posY\030\004 \002(\005\022\r\n\005sizeX\030\005 \002(\005\022\r\n"
    "\005sizeY\030\006 \002(\005\"U\n\013SpriteSheet\022\020\n\010entityID\030"
    "\001 \002(\005\022\017\n\007animTag\030\002 \002(\t\022#\n\006frames\030\003 \003(\0132\023"
    ".DasSpace.FrameData", 219);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FrameData.proto", &protobuf_RegisterTypes);
  FrameData::default_instance_ = new FrameData();
  SpriteSheet::default_instance_ = new SpriteSheet();
  FrameData::default_instance_->InitAsDefaultInstance();
  SpriteSheet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FrameData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FrameData_2eproto {
  StaticDescriptorInitializer_FrameData_2eproto() {
    protobuf_AddDesc_FrameData_2eproto();
  }
} static_descriptor_initializer_FrameData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FrameData::kAnimTagFieldNumber;
const int FrameData::kSeqenceFieldNumber;
const int FrameData::kPosXFieldNumber;
const int FrameData::kPosYFieldNumber;
const int FrameData::kSizeXFieldNumber;
const int FrameData::kSizeYFieldNumber;
#endif  // !_MSC_VER

FrameData::FrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DasSpace.FrameData)
}

void FrameData::InitAsDefaultInstance() {
}

FrameData::FrameData(const FrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DasSpace.FrameData)
}

void FrameData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  animtag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seqence_ = 0;
  posx_ = 0;
  posy_ = 0;
  sizex_ = 0;
  sizey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameData::~FrameData() {
  // @@protoc_insertion_point(destructor:DasSpace.FrameData)
  SharedDtor();
}

void FrameData::SharedDtor() {
  if (animtag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete animtag_;
  }
  if (this != default_instance_) {
  }
}

void FrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameData_descriptor_;
}

const FrameData& FrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FrameData_2eproto();
  return *default_instance_;
}

FrameData* FrameData::default_instance_ = NULL;

FrameData* FrameData::New() const {
  return new FrameData;
}

void FrameData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FrameData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(seqence_, sizey_);
    if (has_animtag()) {
      if (animtag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        animtag_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DasSpace.FrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string animTag = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_animtag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->animtag().data(), this->animtag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "animtag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seqence;
        break;
      }

      // required int32 seqence = 2;
      case 2: {
        if (tag == 16) {
         parse_seqence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqence_)));
          set_has_seqence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_posX;
        break;
      }

      // required int32 posX = 3;
      case 3: {
        if (tag == 24) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_posY;
        break;
      }

      // required int32 posY = 4;
      case 4: {
        if (tag == 32) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sizeX;
        break;
      }

      // required int32 sizeX = 5;
      case 5: {
        if (tag == 40) {
         parse_sizeX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sizex_)));
          set_has_sizex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sizeY;
        break;
      }

      // required int32 sizeY = 6;
      case 6: {
        if (tag == 48) {
         parse_sizeY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sizey_)));
          set_has_sizey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DasSpace.FrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DasSpace.FrameData)
  return false;
#undef DO_
}

void FrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DasSpace.FrameData)
  // required string animTag = 1;
  if (has_animtag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animtag().data(), this->animtag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animtag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->animtag(), output);
  }

  // required int32 seqence = 2;
  if (has_seqence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seqence(), output);
  }

  // required int32 posX = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posx(), output);
  }

  // required int32 posY = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posy(), output);
  }

  // required int32 sizeX = 5;
  if (has_sizex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sizex(), output);
  }

  // required int32 sizeY = 6;
  if (has_sizey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sizey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DasSpace.FrameData)
}

::google::protobuf::uint8* FrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DasSpace.FrameData)
  // required string animTag = 1;
  if (has_animtag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animtag().data(), this->animtag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animtag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->animtag(), target);
  }

  // required int32 seqence = 2;
  if (has_seqence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seqence(), target);
  }

  // required int32 posX = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posx(), target);
  }

  // required int32 posY = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posy(), target);
  }

  // required int32 sizeX = 5;
  if (has_sizex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sizex(), target);
  }

  // required int32 sizeY = 6;
  if (has_sizey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sizey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DasSpace.FrameData)
  return target;
}

int FrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string animTag = 1;
    if (has_animtag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->animtag());
    }

    // required int32 seqence = 2;
    if (has_seqence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqence());
    }

    // required int32 posX = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // required int32 posY = 4;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // required int32 sizeX = 5;
    if (has_sizex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sizex());
    }

    // required int32 sizeY = 6;
    if (has_sizey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sizey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameData::MergeFrom(const FrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_animtag()) {
      set_animtag(from.animtag());
    }
    if (from.has_seqence()) {
      set_seqence(from.seqence());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_sizex()) {
      set_sizex(from.sizex());
    }
    if (from.has_sizey()) {
      set_sizey(from.sizey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameData::CopyFrom(const FrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FrameData::Swap(FrameData* other) {
  if (other != this) {
    std::swap(animtag_, other->animtag_);
    std::swap(seqence_, other->seqence_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(sizex_, other->sizex_);
    std::swap(sizey_, other->sizey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameData_descriptor_;
  metadata.reflection = FrameData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpriteSheet::kEntityIDFieldNumber;
const int SpriteSheet::kAnimTagFieldNumber;
const int SpriteSheet::kFramesFieldNumber;
#endif  // !_MSC_VER

SpriteSheet::SpriteSheet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DasSpace.SpriteSheet)
}

void SpriteSheet::InitAsDefaultInstance() {
}

SpriteSheet::SpriteSheet(const SpriteSheet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DasSpace.SpriteSheet)
}

void SpriteSheet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  entityid_ = 0;
  animtag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpriteSheet::~SpriteSheet() {
  // @@protoc_insertion_point(destructor:DasSpace.SpriteSheet)
  SharedDtor();
}

void SpriteSheet::SharedDtor() {
  if (animtag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete animtag_;
  }
  if (this != default_instance_) {
  }
}

void SpriteSheet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpriteSheet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpriteSheet_descriptor_;
}

const SpriteSheet& SpriteSheet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FrameData_2eproto();
  return *default_instance_;
}

SpriteSheet* SpriteSheet::default_instance_ = NULL;

SpriteSheet* SpriteSheet::New() const {
  return new SpriteSheet;
}

void SpriteSheet::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    entityid_ = 0;
    if (has_animtag()) {
      if (animtag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        animtag_->clear();
      }
    }
  }
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpriteSheet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DasSpace.SpriteSheet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 entityID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_animTag;
        break;
      }

      // required string animTag = 2;
      case 2: {
        if (tag == 18) {
         parse_animTag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_animtag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->animtag().data(), this->animtag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "animtag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_frames;
        break;
      }

      // repeated .DasSpace.FrameData frames = 3;
      case 3: {
        if (tag == 26) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_frames;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DasSpace.SpriteSheet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DasSpace.SpriteSheet)
  return false;
#undef DO_
}

void SpriteSheet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DasSpace.SpriteSheet)
  // required int32 entityID = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entityid(), output);
  }

  // required string animTag = 2;
  if (has_animtag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animtag().data(), this->animtag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animtag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->animtag(), output);
  }

  // repeated .DasSpace.FrameData frames = 3;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->frames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DasSpace.SpriteSheet)
}

::google::protobuf::uint8* SpriteSheet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DasSpace.SpriteSheet)
  // required int32 entityID = 1;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entityid(), target);
  }

  // required string animTag = 2;
  if (has_animtag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animtag().data(), this->animtag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animtag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->animtag(), target);
  }

  // repeated .DasSpace.FrameData frames = 3;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->frames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DasSpace.SpriteSheet)
  return target;
}

int SpriteSheet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 entityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entityid());
    }

    // required string animTag = 2;
    if (has_animtag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->animtag());
    }

  }
  // repeated .DasSpace.FrameData frames = 3;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpriteSheet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpriteSheet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpriteSheet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpriteSheet::MergeFrom(const SpriteSheet& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_animtag()) {
      set_animtag(from.animtag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpriteSheet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpriteSheet::CopyFrom(const SpriteSheet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpriteSheet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->frames())) return false;
  return true;
}

void SpriteSheet::Swap(SpriteSheet* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(animtag_, other->animtag_);
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpriteSheet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpriteSheet_descriptor_;
  metadata.reflection = SpriteSheet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DasSpace

// @@protoc_insertion_point(global_scope)
